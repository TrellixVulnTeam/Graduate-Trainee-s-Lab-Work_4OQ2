1a) A closure gives you access to an outer function scope from an inner function and a closure are created every time a function is created 
 at function creation time A closure is the combination of a function bundled together 
 ex: closure : 

 function multFn() {
  var mult = 2;
  return function(val) {
    mult = mult * val;
    return mult;
  }
}

// Use the closure
var mult = multFn();
console.log(mult(3));
 
output: 6

2a)A shallow copy  When a reference variable is copied into a new reference variable using the assignment operator
a shallow copy of the referenced object is created. Reference variable mainly stores the address of the object
This means both the old and new reference variable point to the same object in memory 

A deep copy 
unlike the shallow copy, deep copy makes a copy of all the members of the old object, 
allocates separate memory location for the new object and then assigns the copied members to the new object.
 In this way, both the objects are independent of each other and in case of any modification to either one the other is not affected.
 this is called shallow and deep copy

 3a)When we destructuring objects, we use curly braces with the exact name of what we have in the object.
Unlike in arrays where we can use any variable name to unpack the element, objects allow just the use of the name of the stored data.
we can manipulate and assign a variable name to the data we want to get from the object.
exmple for destructuring an object in javascript :

const full name= {
    first name: "channu",
    middle name : "praveen",
    last name: "kumar",
  };
  
  const { first name, last name } = full name;
  console.log(first name , last name );

  4A) 1.Shorter and simpler syntax
      2.noo need to say function name
      3. Arrows functions were introduced in ES6 JavaScript
      ex :  arrow functions 
      var result = { 
        name: "Hello", 
        data: function data() { 
          setTimeout(() => { 
            console.log(this.name); 
          }, 7000); 
        } 
      }; 
    
    5a)Higher Orders Functions are functions that perform operations on other functions.
    operations can mean taking one or more functions as an argument.
    expmle of higher order function :
    
    const numbers = [1, 2, 3, 4, 5];

    function getTotalValue(array) {
      let total = 0;
      for (let i = 0; i < array.length; i++) {
        total += array[i];
      }
      return total;
    }
    
    const totalValue = getTotalValue(numbers);
    console.log(totalValue);

    finding total number of values
    
    6A)Event loop is an endless loop, which waits for tasks, executes them and then sleeps until it receives more tasks.
    exmaple:
    const one = () => console.log("First");
const two = () => setTimeout(() => console.log("Second"), 500);
const three = () => console.log("Third");

one();
two();
three();
Output:
First
Third 
Second

7a)The building blocks of Angular like components, directives, modules, services, component templates.
Angular has main eight building blocks.There are,

01)Modules
02)Components
03)Templates
04)Metadata
05)Data binding
06)Directives
07)Services
08)Dependency injection

8a) #1 Modular Development Structure
The modular development architecture of Angular gives developers and designers more customization abilities.
#2 Two-Way Data Binding
Angular allows rapid synchronization between the view and the model as it is built on MVC (Model-View-Controller) architecture
#3 Community Support
Angular became an extremely popular framework among developers around the world right when it was first introduced.
#4 Faster Load Time
to its ahead-of-time compiler, web apps that are built on Angular offer users faster load time and enhanced security.

9a)One of the best advantages of single page application development is that it can cache any local data efficiently.
The SPA just sends one request and stores all data from the server.
As there is on-going access to the data, users can even work offline. The local data is synchronized with the server.

10)Data Binding in Angular
The data binding in Angular can be classified into two groups. One way binding or two-way binding

From Component to View
To bind data from component to view, we make use of Interpolation & Property Binding.
Interpolation
Interpolation allows us to include expressions as part of any string literal
Property binding
The Property binding allows us to bind HTML element property to a property in the component

Two-way binding 
Means that changes made to our model in the component are propagated 
to the view and that any changes made in the view are immediately updated in the underlying component.
Two-way binding is useful in data entry forms




